---
- name: Installs packages
  tags: dehydrated
  apt:
    install_recommends: false
    cache_valid_time: 86400
    name:
      - dehydrated

#- name: create dehydrated hook file
#  # This hook is called after getting a new cert to deploy it
#  template:
#    src: templates/hook.sh
#    dest: /etc/dehydrated/hook.sh
#    mode: 0755
#    owner: root
#
#
#- name: set dehydrated hook
#  blockinfile:
#    path: /etc/dehydrated/config
#    block: |
#      HOOK="/etc/dehydrated/hook.sh"

- name: Add ACME dedicated sites-enabled file
  tags: dehydrated
  ansible.builtin.template:
    src: templates/letsencrypt-http
    # the server block matches all SSL FQDNs and must be
    # parsed first, hence 00-
    dest: /etc/nginx/sites-enabled/00-letsencrypt-http
    mode: "0644"
    owner: root

- name: Add canary file to ensure /.well-known/acme-challenge is reachable by let's encrypt
  tags: dehydrated
  ansible.builtin.copy:
    content: |
      Generated by ansible using ansible/roles/dehydrated/tasks/main.yml.

      Also, meow!!!
    dest: /var/lib/dehydrated/acme-challenges/ooni-acme-canary
    mode: "0644"
    owner: root

- name: reload nftables service
  tags: dehydrated
  shell: systemctl reload nftables.service

- name: Configure domains {{ ssl_domains }}
  # https://github.com/dehydrated-io/dehydrated/blob/master/docs/domains_txt.md
  tags: dehydrated
  template:
    src: templates/domains.txt.j2
    dest: /etc/dehydrated/domains.txt

- name: Register account if needed
  tags: dehydrated
  ansible.builtin.shell:
    cmd: "test -d /var/lib/dehydrated/accounts || dehydrated --register --accept-terms"

- name: Install dehydrated.service
  tags: dehydrated
  template:
    src: templates/dehydrated.service
    dest: /etc/systemd/system/dehydrated.service
    mode: 0644
    owner: root

- name: Install dehydrated.timer
  tags: dehydrated
  template:
    src: templates/dehydrated.timer
    dest: /etc/systemd/system/dehydrated.timer
    mode: 0644
    owner: root

- name: Ensure timer runs
  tags: dehydrated
  systemd:
    name: dehydrated.timer
    state: started
    enabled: yes
  notify:
    # creates:
    # /var/lib/dehydrated/certs/<name>/chain.pem cert.pem privkey.pem fullchain.pem

    # Note that we need to restart dehydrated ensuring that nginx reloads before dehydrated restarts.
    # When we first run dehydrated with the tasks above it creates an nginx rule that is required
    # to pass the ACME challenge. 
    # If nginx doesn't picks this rule before dehydrated runs again, the ACME challenge will fail
    # crashing the playbook
    # 
    # See: https://github.com/ooni/devops/pull/235#discussion_r2053664605
    - reload nginx and restart dehydrated